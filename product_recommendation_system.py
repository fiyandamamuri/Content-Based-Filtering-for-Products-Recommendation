# -*- coding: utf-8 -*-
"""product_recommendation_system.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gGw8IwZA_qW0YYvx3F3Ax2v-mQrj7OkK

# **Product Recommendation System : BigBasket Products Datasets**
- Nama: Fiyanda Ma'muri
- Email: fiyandamamuri@gmail.com
- ID Dicoding: fiyandamamuri


Dataset: https://www.kaggle.com/datasets/surajjha101/bigbasket-entire-product-list-28k-datapoints

## Project Overview

Notebook ini berisi implementasi sistem rekomendasi produk menggunakan dataset dari BigBasket. Tujuan utama proyek ini adalah membangun sistem rekomendasi:
- **Content-Based Filtering (CBF)**: merekomendasikan produk berdasarkan kemiripan atribut produk.

Sistem ini dirancang untuk membantu pengguna menemukan produk relevan dari ribuan item dalam katalog BigBasket.

## Business Understanding

BigBasket adalah platform e-commerce berbasis grosir dan ritel yang menjual beragam produk rumah tangga, makanan, dan kebutuhan harian. Dengan ribuan produk tersedia, pengguna dapat mengalami kebingungan dalam memilih.

**Tujuan bisnis** dari proyek ini adalah:
- Meningkatkan kenyamanan pengguna dalam menemukan produk.
- Meningkatkan konversi dan retensi pelanggan melalui rekomendasi yang relevan.
- Mengurangi waktu eksplorasi dengan menyarankan produk yang sesuai preferensi atau kebiasaan belanja pengguna.

## Data Understanding

Dataset yang digunakan berasal dari situs [Kaggle](https://www.kaggle.com/datasets/surajjha101/bigbasket-entire-product-list-28k-datapoints) dan berisi daftar lebih dari 28.000 produk yang dijual di platform e-commerce BigBasket. Dataset ini memiliki **10 atribut utama** yang masing-masing memberikan informasi penting mengenai setiap produk. Berikut ini adalah penjelasan masing-masing atribut:

| Nama Kolom      | Deskripsi                                                                 |
|------------------|--------------------------------------------------------------------------|
| `index`          | Nomor indeks baris pada dataset, hanya sebagai penanda urutan data.      |
| `product`        | Nama atau judul dari produk sebagaimana tercantum di situs BigBasket.     |
| `category`       | Kategori utama produk, seperti "Beauty & Hygiene", "Foodgrains", dll.     |
| `sub_category`   | Sub-kategori dari produk yang lebih spesifik dari kategori utama.         |
| `brand`          | Merek atau nama brand dari produk, seperti "Fresho", "bb Royal", dll.     |
| `sale_price`     | Harga jual produk di situs BigBasket (harga setelah diskon).              |
| `market_price`   | Harga pasar normal produk sebelum diskon.                                 |
| `type`           | Jenis atau bentuk produk, seperti "Oil", "Serum", "Tablet", dll.          |
| `rating`         | Nilai rating dari pengguna, dalam skala 1 sampai 5.                       |
| `description`    | Deskripsi lengkap produk yang menjelaskan manfaat dan informasi lainnya.  |

Dataset ini memiliki banyak nilai kosong pada kolom `rating` dan `description`, serta mengandung data multikategori yang dipisahkan oleh karakter seperti `&`, `,`, atau baris baru. Oleh karena itu, diperlukan beberapa tahapan pembersihan dan transformasi data sebelum digunakan dalam sistem rekomendasi. Namun karena saya akan menerapkan sistem rekomendasi dengan Content-Based Filtering, maka fitur yang dipakai merupakan fitur yang berbasis konten yang akan di jelaskan di bagian Data Preparation.

### Import Library
"""

!pip install numpy==1.24.4
!pip install scikit-surprise --no-binary scikit-surprise

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
sns.set(style="whitegrid")
import re
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import precision_score
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
import random

"""Mengimpor berbagai library yang dibutuhkan untuk analisis data, visualisasi, pemrosesan teks, dan pembangunan sistem rekomendasi.
- pandas, numpy: untuk manipulasi dan analisis data
- matplotlib, seaborn: untuk visualisasi eksploratif
- sklearn: untuk ekstraksi fitur, evaluasi, dan pemodelan konten
- surprise: untuk implementasi algoritma Collaborative Filtering berbasis matrix factorization (SVD)
- re: untuk pemrosesan teks dasar
- random: untuk pemilihan acak

Instalasi tambahan dilakukan untuk versi spesifik numpy dan scikit-surprise.

### Data Loading
"""

df = pd.read_csv('BigBasket Products.csv')

df.head()

"""Memuat dataset BigBasket Products dari file CSV ke dalam DataFrame df untuk analisis lebih lanjut. Kemudian menampilkan 5 baris pertama sebagai gambaran awal struktur dan isi data.

### Exploratory Data Analysis (EDA)
"""

df.info()

"""Menampilkan informasi umum mengenai struktur dataset, termasuk jumlah baris, jumlah kolom, tipe data tiap kolom, serta jumlah nilai non-null. Dari output ini, terlihat bahwa terdapat nilai hilang khususnya pada kolom product, brand, rating, dan description."""

df.describe()

"""Menampilkan statistik deskriptif untuk kolom numerik dalam dataset.
Beberapa insight awal:

- Harga jual (sale_price) dan harga pasar (market_price) memiliki rentang yang cukup besar, menunjukkan variasi produk.

- Rata-rata rating pengguna adalah sekitar 3.94 dengan nilai maksimum 5 dan minimum 1, mengindikasikan adanya distribusi opini yang cukup lebar dari pengguna.
"""

print("Missing values:")
df.isnull().sum()

"""Melakukan pengecekan nilai kosong (missing values) pada setiap kolom.
Hasilnya menunjukkan bahwa:

- Kolom rating memiliki jumlah nilai kosong paling banyak (8.626 baris), yang perlu ditangani karena digunakan untuk sistem rekomendasi.

- Kolom description juga memiliki missing values (115 baris), namun kemungkinan tidak krusial untuk model ini.

- Kolom product dan brand masing-masing hanya memiliki 1 nilai kosong.


"""

print("Duplicates:")
df.duplicated().sum()

"""Memeriksa apakah terdapat baris data yang duplikat dalam dataset.
Hasil menunjukkan bahwa tidak ada data duplikat, sehingga tidak diperlukan tindakan pembersihan untuk kasus ini.
"""

#  Jumlah Nilai Unik per Kolom
print("Jumlah nilai unik tiap kolom:")
for col in ['product', 'category', 'sub_category', 'brand', 'rating']:
    print(f"- {col}: {df[col].nunique()}")

"""Kode ini digunakan untuk menghitung jumlah nilai unik (distinct values) dari setiap kolom yang relevan dalam dataset, yaitu: product, category, sub_category, brand, dan rating.

Hasil yang diperoleh:
- product: 23.540 produk unik tercatat di dataset.
- category: 11 kategori utama.
- sub_category: 90 sub-kategori produk yang lebih spesifik.
- brand: 2.313 merek produk yang berbeda.
- rating: 40 nilai rating unik yang digunakan (kemungkinan dalam bentuk skala desimal atau integer bervariasi).

> Banyaknya produk dan brand menunjukkan keragaman konten produk yang sangat tinggi, cocok untuk digunakan dalam sistem rekomendasi berbasis konten (CBF).

> Rating yang beragam memberi potensi untuk analisis kualitas dan preferensi produk.

> Distribusi kategori dan sub-kategori dapat digunakan untuk mengelompokkan produk yang serupa.
"""

# Jumlah Item per Kategori
plt.figure(figsize=(10, 6))
sns.countplot(y='category', data=df, order=df['category'].value_counts().index, palette='coolwarm')
plt.title('Jumlah Produk per Kategori')
plt.xlabel('Jumlah Produk')
plt.ylabel('Kategori')
plt.tight_layout()
plt.show()

"""Visualisasi ini menunjukkan jumlah produk di setiap kategori utama dalam dataset BigBasket. Kategori **Beauty & Hygiene** memiliki jumlah produk terbanyak (7.867), diikuti oleh **Gourmet & World Food** (4.690) dan **Kitchen, Garden & Pets** (3.580). Sementara itu, kategori seperti **Eggs, Meat & Fish** memiliki jumlah produk paling sedikit (350). Informasi ini membantu memahami distribusi produk dan fokus utama platform, serta mengidentifikasi kategori potensial untuk rekomendasi atau pengembangan lebih lanjut.

"""

# 10 Produk Terlaris (Paling Banyak Muncul)
top_products = df['product'].value_counts().head(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=top_products.values, y=top_products.index, palette='viridis')
plt.title('10 Produk Terlaris')
plt.xlabel('Jumlah Kemunculan')
plt.ylabel('Nama Produk')
plt.tight_layout()
plt.show()

"""Kode ini menghitung frekuensi kemunculan setiap produk menggunakan `value_counts()` dan mengambil 10 teratas sebagai produk terlaris. Grafik batang horizontal dibuat menggunakan `sns.barplot()` untuk memvisualisasikan jumlah kemunculan masing-masing produk. Pengaturan seperti judul, label sumbu, dan tata letak ditambahkan agar grafik informatif dan rapi. Hasilnya menunjukkan 10 produk paling populer dalam dataset, yang dapat dijadikan dasar untuk rekomendasi berbasis popularitas. Hasilnya menunjukkan bahwa produk seperti Turmeric Powder, Extra Virgin Olive Oil, dan Cow Ghee adalah yang paling sering muncul, sehingga bisa dianggap sebagai produk terlaris. Analisis ini membantu memahami tren popularitas dan bisa digunakan sebagai dasar rekomendasi populer."""

# 10 Produk Paling Jarang Muncul
least_products = df['product'].value_counts().tail(10)
plt.figure(figsize=(12, 6))
sns.barplot(x=least_products.values, y=least_products.index, palette='Reds')
plt.title('10 Produk Paling Jarang Muncul')
plt.xlabel('Jumlah Kemunculan')
plt.ylabel('Nama Produk')
plt.tight_layout()
plt.show()

"""Kode ini menampilkan 10 produk dengan kemunculan paling sedikit dalam dataset. Produk-produk ini dianggap kurang populer atau jarang dibeli, sehingga informasi ini dapat membantu mengidentifikasi produk niche atau yang memerlukan strategi pemasaran khusus. Visualisasi menggunakan grafik batang memperlihatkan perbandingan jumlah kemunculan tiap produk secara jelas."""

# Distribusi Rating
plt.figure(figsize=(15, 4))
sns.countplot(x='rating', data=df, palette='Set2')
plt.title('Distribusi Rating Produk')
plt.xlabel('Rating')
plt.ylabel('Jumlah Produk')
plt.tight_layout()
plt.show()

"""Kode ini menampilkan distribusi jumlah produk berdasarkan nilai rating yang diberikan. Dengan menggunakan `countplot`, kita bisa melihat seberapa banyak produk yang mendapatkan masing-masing nilai rating. Visualisasi ini membantu memahami persebaran kualitas produk menurut penilaian pengguna secara keseluruhan. Distribusi rating produk menunjukkan bahwa sebagian besar produk mendapat nilai rating di kisaran 3.0 hingga 4.5, dengan puncak tertinggi pada rating 4.2 (2.251 produk) dan 4.3 (2.140 produk). Rating sangat rendah (di bawah 2.0) dan sangat tinggi (5.0) relatif lebih sedikit, menandakan mayoritas produk mendapatkan penilaian yang cukup baik dan tersebar merata di rentang menengah hingga tinggi."""

# Produk dengan Rating Tertinggi (5) Berdasarkan Kategori
high_rating_df = df[df['rating'] == 5]
top_rated_per_cat = high_rating_df['category'].value_counts().head(10)

plt.figure(figsize=(10, 6))
sns.barplot(x=top_rated_per_cat.values, y=top_rated_per_cat.index, palette='Greens')
plt.title('Jumlah Produk dengan Rating 5 per Kategori (Top 10)')
plt.xlabel('Jumlah Produk Rating 5')
plt.ylabel('Kategori')
plt.tight_layout()
plt.show()

"""Kode ini menampilkan 10 kategori dengan jumlah produk yang mendapatkan rating tertinggi (nilai 5) terbanyak. Kategori *Beauty & Hygiene* mendominasi dengan 562 produk, diikuti oleh *Gourmet & World Food* dan *Kitchen, Garden & Pets*. Informasi ini membantu mengidentifikasi kategori dengan produk berkualitas unggulan berdasarkan penilaian pengguna.

## Data Preparation
"""

data_clean = df.copy()

"""Salinan data asli dibuat untuk proses pembersihan dan transformasi tanpa mengubah data mentah.
Langkah ini menjaga data asli tetap utuh agar dapat dibandingkan atau digunakan ulang jika diperlukan.
"""

if 'index' in data_clean.columns:
    data_clean.drop(columns='index', inplace=True)

"""Kolom index yang tidak relevan dengan analisis dihapus untuk menyederhanakan dataset dan menghindari gangguan saat pemrosesan data selanjutnya."""

initial_rows = data_clean.shape[0]
data_clean.drop_duplicates(inplace=True)
final_rows = data_clean.shape[0]
print(f"{initial_rows - final_rows} duplikat dihapus.")

"""Data diperiksa dan baris duplikat dihapus untuk memastikan setiap produk hanya muncul sekali.
Hal ini penting agar model tidak bias akibat data yang berulang.
Sebanyak 354 baris duplikat berhasil dihapus dari dataset, memastikan data yang digunakan unik dan berkualitas untuk analisis lebih lanjut.
"""

data_clean.head()

"""Menampilkan 5 baris pertama dataset setelah pembersihan data, menghapus duplikat dan menangani nilai kosong.
Dataset kini siap untuk tahap pemrosesan lebih lanjut dengan fitur lengkap dan format yang bersih.
"""

def bersihkan_text(teks):
    if isinstance(teks, list):
        return [t.strip().lower().replace(" ", "") for t in teks]
    elif isinstance(teks, str):
        return teks.strip().lower().replace(" ", "")
    else:
        return ''

def split_multivalue(teks):
    if isinstance(teks, str):
        return re.split(r"&|,|\*|\n", teks)
    return []


for kolom in ['category', 'sub_category', 'type']:
    data_clean[kolom] = data_clean[kolom].apply(split_multivalue).apply(bersihkan_text)

data_clean['brand'] = data_clean['brand'].apply(bersihkan_text)

"""Dua fungsi dibuat untuk membersihkan dan menyiapkan data kategorikal:

- split_multivalue(teks):
Memisahkan string kategori yang mengandung beberapa nilai (dipisahkan dengan &, ,, *, atau newline) menjadi list. Contoh: "Fruits & Vegetables" → ["Fruits", "Vegetables"].

- bersihkan_text(teks):
Membersihkan teks dari spasi dan mengubahnya menjadi huruf kecil. Jika input berupa list, fungsi ini akan membersihkan setiap elemen dalam list tersebut. Contoh: " Hair Care " → "haircare".

Fungsi-fungsi ini diterapkan pada kolom category, sub_category, dan type agar konsisten dalam format list bersih.
Kolom brand juga dibersihkan untuk menyamakan format meskipun hanya berisi satu nilai.

Langkah ini penting untuk mempersiapkan data sebelum diubah menjadi fitur teks dalam sistem rekomendasi berbasis konten (CBF).
"""

cbf_data = data_clean.copy()

"""Salinan data bersih dibuat ke dalam variabel cbf_data khusus untuk proses Content-Based Filtering.
Hal ini menjaga data utama tetap utuh saat fitur khusus CBF ditambahkan atau dimodifikasi.
"""

def gabungkan_fitur(row):
    kategori = " ".join(row['category']) if isinstance(row['category'], list) else ''
    sub_kategori = " ".join(row['sub_category']) if isinstance(row['sub_category'], list) else ''
    tipe = " ".join(row['type']) if isinstance(row['type'], list) else ''
    merek = row['brand'] if isinstance(row['brand'], str) else ''

    gabungan = f"{kategori} {sub_kategori} {tipe} {merek}"
    return gabungan.strip()


cbf_data['fitur_gabungan'] = cbf_data.apply(gabungkan_fitur, axis=1)

print("\nhasil penggabungan fitur CBF:")
cbf_data[['product', 'fitur_gabungan']].head()

"""Fungsi gabungkan_fitur() dibuat untuk menggabungkan beberapa atribut penting dari produk, yaitu:

- category, sub_category, dan type (dijadikan satu string jika berupa list),

- serta brand.

Gabungan ini disimpan dalam kolom baru fitur_gabungan, yang menjadi representasi teks setiap produk untuk proses Content-Based Filtering.
Contoh hasilnya mencakup kata-kata seperti:
"beauty hygiene haircare hairoil serum srisriayurveda"

Langkah ini penting sebagai input ke TF-IDF Vectorizer dalam tahap selanjutnya.
"""

cbf_unique = cbf_data.drop_duplicates(subset='product', keep='first').reset_index(drop=True)

tfidf = TfidfVectorizer(stop_words='english')
tfidf_matrix = tfidf.fit_transform(cbf_unique['fitur_gabungan'])

print(f"Ukuran TF-IDF matrix: {tfidf_matrix.shape}")

"""Untuk membangun model CBF, data duplikat berdasarkan nama produk dihapus agar setiap produk hanya muncul sekali (cbf_unique).
Kolom fitur_gabungan kemudian diproses menggunakan TF-IDF Vectorizer untuk mengubah teks menjadi representasi numerik.

TF-IDF digunakan untuk menangkap pentingnya kata dalam konteks setiap produk, sambil mengabaikan kata-kata umum (stop words).

Output:
Ukuran matriks TF-IDF adalah (23449, 3035), artinya ada 23.449 produk dan 3.035 fitur unik yang terdeteksi dari teks.

## Modeling & Result
"""

cosine_sim_matrix = cosine_similarity(tfidf_matrix, tfidf_matrix)

print(f"Ukuran cosine similarity matrix: {cosine_sim_matrix.shape}")

"""Menggunakan cosine similarity, sistem menghitung tingkat kemiripan antar produk berdasarkan representasi TF-IDF-nya.
Setiap produk dibandingkan dengan seluruh produk lainnya untuk menemukan seberapa mirip mereka berdasarkan deskripsi fiturnya.

Output:
Matriks hasil berukuran (23449, 23449), artinya setiap produk memiliki skor kemiripan terhadap 23.449 produk lainnya.

Matriks ini akan digunakan untuk menghasilkan rekomendasi produk yang mirip secara konten.
"""

product_indices = pd.Series(cbf_unique.index, index=cbf_unique['product'])

def rekomendasi_produk(nama_produk, cosine_sim=cosine_sim_matrix, df=cbf_unique):
    if nama_produk not in product_indices:
        return f"Produk '{nama_produk}' tidak ditemukan."

    idx = product_indices[nama_produk]
    sim_scores = list(enumerate(cosine_sim[idx]))
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:11]
    top_indices = [i[0] for i in sim_scores]

    return df.iloc[top_indices][['product', 'brand']]

produk_acak = cbf_unique['product'].sample(1).values[0]
print(f"Rekomendasi produk mirip dengan: {produk_acak}")
rekomendasi_produk(produk_acak)

"""Kode ini mendefinisikan fungsi `rekomendasi_produk()` yang menghasilkan 10 produk paling mirip dengan produk input berdasarkan cosine similarity dari fitur gabungan (hasil TF-IDF).

Langkah-langkah:
- Membuat indeks produk (`product_indices`) untuk mengakses baris data berdasarkan nama produk.
- Dalam fungsi, dicek apakah produk tersedia.
- Mengambil skor kemiripan (cosine similarity) terhadap seluruh produk.
- Mengurutkan skor tersebut dan mengambil 10 produk teratas (kecuali dirinya sendiri).
- Mengembalikan daftar produk dan brand sebagai hasil rekomendasi.

Terakhir, fungsi diuji dengan memilih satu produk secara acak dari dataset.

## Evaluation
"""

# evaluasi Precision@k
def precision_at_k_cbf(df, cosine_sim, k=10):
    hits = 0
    total = 0
    recommended_items = set()

    for idx, row in df.iterrows():
        produk_asli = row['product']
        kategori_asli = set(row['category'])

        produk_idx = product_indices.get(produk_asli, None)
        if produk_idx is None:
            continue

        sim_scores = list(enumerate(cosine_sim[produk_idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:k+1]
        top_indices = [i[0] for i in sim_scores]

        rekomendasi = df.iloc[top_indices]

        for _, rec in rekomendasi.iterrows():
            if set(rec['category']) & kategori_asli:
                hits += 1
            recommended_items.add(rec['product'])

        total += k

    precision = hits / total if total else 0
    coverage = len(recommended_items) / df['product'].nunique()
    return precision, coverage

"""
Untuk mengevaluasi performa sistem rekomendasi CBF, digunakan metrik **Precision@k** dan **Coverage**.

- **Precision@k**: Mengukur proporsi item rekomendasi yang termasuk dalam kategori yang sama dengan produk asli. Ini mencerminkan relevansi rekomendasi.
- **Coverage**: Mengukur sejauh mana sistem merekomendasikan beragam produk dari keseluruhan dataset.

Fungsi `precision_at_k_cbf()` akan menghitung kedua metrik ini berdasarkan kesamaan kategori antara produk asli dan hasil rekomendasinya.

Fungsi ini mengevaluasi top-k rekomendasi dari setiap produk berdasarkan cosine similarity.

hits bertambah jika kategori produk rekomendasi memiliki irisan dengan kategori produk asli.

recommended_items digunakan untuk menghitung seberapa luas cakupan rekomendasi yang diberikan (coverage)."""

precision, coverage = precision_at_k_cbf(cbf_unique, cosine_sim_matrix, k=10)

  print(f"Precision@10: {precision:.4f}")
  print(f"Coverage: {coverage:.4f}")

"""Evaluasi sistem rekomendasi CBF dilakukan menggunakan metrik **Precision@10** dan **Coverage**.

- **Precision@10** sebesar **0.9988** menunjukkan bahwa hampir semua produk yang direkomendasikan berada dalam kategori yang sama dengan produk input, yang mengindikasikan bahwa rekomendasi sangat relevan.
- **Coverage** sebesar **0.6901** berarti sistem berhasil merekomendasikan sekitar 69% dari total produk unik yang tersedia, mencerminkan jangkauan rekomendasi yang cukup luas.
"""